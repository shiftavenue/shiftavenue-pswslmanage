---
name: ci
on: 
  pull_request:
    branches:
      - dev

jobs:
  ci:
    name: ci
    runs-on: [self-hosted]
    permissions:
      actions: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: ./pswslmanage

      - name: Increase build variable
        run: |
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          $_username="dummy"
          $_token=$($env:GH_TOKEN)
          $_base64_auth_info = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f $_username,$_token)))
          $_headers = @{Authorization="Basic $_base64_auth_info"}
          $_uri = 'https://api.github.com/repos/shiftavenue/shiftavenue-pswslmanage/actions/variables/BUILD_NUMBER'
          $_build_number = [int](Invoke-RestMethod -Uri $_uri -Method Get -Headers $_headers).value
          $_build_number++
          Invoke-RestMethod -Uri $_uri -Method Patch -Headers $_headers -Body (@{"name"="BUILD_NUMBER";"value"="$_build_number"} | ConvertTo-Json)
          Write-Output CUSTOM_BUILD_NUMBER=$_build_number >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{secrets.RUNNER_PAT}}

      - name: Set and print needed variables
        run: |
          $_is_admin=(New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
          echo "Local admin permissions:  $_is_admin"
          echo "Build number in GitHub variables: ${{ vars.BUILD_NUMBER }}"
          dir env:
        shell: pwsh

      # This results in No match was found for the specified search criteria for the provider 'NuGet'. 
      #    The package provider requires 'PackageManagement' and 'Provider' tags. Please check if the specified package has the tags.
      #    Error apperas just when execution as github action. Probably 
      # - name: Update package provider
      #   run: |
      #     Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Scope CurrentUser -Force
      #   shell: pwsh

      - name: Execute PSScriptAnalyzer
        run: |
          $_repo_dir = "{0}\shiftavenue-pswslmanage\pswslmanage" -f $($env:RUNNER_WORKSPACE)
          $_issue_list=$null
          $_issue_list=@()
          echo "Working directory for script analyzer: $_repo_dir"
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module PSScriptAnalyzer -AllowClobber -Scope CurrentUser -ErrorAction SilentlyContinue
          Import-Module PSScriptAnalyzer -ErrorAction SilentlyContinue
          Set-PSRepository PSGallery -InstallationPolicy Untrusted
          foreach($_issue in $(Invoke-ScriptAnalyzer -Path "$_repo_dir\pswslmanage.psm1")) {Write-Output "Add issue"; $_issue_list += $_issue}
          foreach($_issue in $(Invoke-ScriptAnalyzer -Path "$_repo_dir\pswslmanage-roles.ps1")) {Write-Output "Add issue"; $_issue_list += $_issue}
          foreach($_issue in $(Invoke-ScriptAnalyzer -Path "$_repo_dir\pswslmanage-helper.ps1")) {Write-Output "Add issue"; $_issue_list += $_issue}
          if($_issue_list.Count -gt 0) {$_issue_list; Write-Error "Linter issues found. Exiting"}
        shell: pwsh

      - name: Create manifest
        run: |
          $_repo_dir = "{0}\shiftavenue-pswslmanage\pswslmanage" -f $($env:RUNNER_WORKSPACE)
          Remove-Item -Path "$_repo_dir\pswslmanage.psd1" -Force
          New-ModuleManifest -Path "$_repo_dir\pswslmanage.psd1" `
                              -ModuleVersion "1.0.$($env:GITHUB_RUN_NUMBER)" `
                              -Author "David Koenig" `
                              -Guid "a2d16567-94f2-4a76-8e0d-c29d40177c56" `
                              -CompatiblePSEditions Core `
                              -PowerShellVersion 7.3 `
                              -CompanyName "shiftavenue" `
                              -Copyright "(c) shiftavenue. All rights reserved." `
                              -RootModule "pswslmanage.psm1" `
                              -Description "With this module you can install and maintain WSL images" `
                              -ProcessorArchitecture Amd64 `
                              -FunctionsToExport @("Add-WslImage", "Test-WslImage", "Get-WslImage", "Remove-WslImage", "Stop-WslImage", "Add-WslUser", "Add-WslRoleSSH" ) `
                              -Tags "wsl,windows,linux,wsl2" `
                              -ProjectUri "https://github.com/shiftavenue/shiftavenue-pswslmanage" `
                              -IconUri "https://raw.githubusercontent.com/shiftavenue/shiftavenue-pswslmanage/main/Icon.png" `
                              -Prerelease "dev${{ vars.BUILD_NUMBER }}"
        shell: pwsh
      
      # - name: Create local repository
      #   run: |
      #     $_repo_dir = "{0}\shiftavenue-pswslmanage\pswslmanage" -f $($env:RUNNER_WORKSPACE)
      #     New-Item "$env:temp\LocalTestRepo" -ItemType Directory -Force
      #     Register-PSRepository -Name LocalTestRepo -SourceLocation "$env:temp\LocalTestRepo" -ScriptSourceLocation "$env:temp\LocalTestRepo" -InstallationPolicy Trusted
      #     Publish-Module -Path "$_repo_dir" -Repository "LocalTestRepo" -NuGetApiKey "dummy" -Verbose
      #   shell: pwsh

      # - name: Invoke tests
      #   run: |
      #     $_repo_dir = "{0}\shiftavenue-pswslmanage\pswslmanage" -f $($env:RUNNER_WORKSPACE)

      #     echo "Install Pester"
      #     Set-PSRepository PSGallery -InstallationPolicy Trusted
      #     Install-Module Pester -AllowClobber -Scope CurrentUser -ErrorAction SilentlyContinue -Force
      #     Import-Module Pester -ErrorAction SilentlyContinue
      #     Set-PSRepository PSGallery -InstallationPolicy Untrusted

      #     echo "Execute tests"
      #     Invoke-Pester "$_repo_dir\tests\pswslmanage.tests.ps1"
      #   shell: pwsh

      # - name: Remove local repository
      #   run: |
      #     $_repo_dir = "{0}\shiftavenue-pswslmanage\pswslmanage" -f $($env:RUNNER_WORKSPACE)
      #     Unregister-PSRepository LocalTestRepo
      #     Remove-Item "$env:temp\LocalTestRepo" -Force -Recurse
      #   shell: pwsh
